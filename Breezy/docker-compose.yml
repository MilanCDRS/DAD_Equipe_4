version: "3.8"

services:
  # ------------------
  # Service Auth (backend d'authentification)
  # ------------------
  auth:
    # En dev on rebuild à chaque `docker-compose up --build`
    build: ./breezy-back-auth
    # En prod, on pourrait remplacer par :
    # image: my-registry/breezy-back-auth:${TAG:-latest}
    ports:
      - "3001:${PORT_AUTH}"
    environment:
      # En dev, on se connecte à Mongo sur le réseau docker
      MONGO_HOST: ${MONGO_HOST_AUTH}
      MONGO_PORT: ${MONGO_PORT_AUTH}
      MONGO_DATABASE_NAME: ${MONGO_DB_AUTH}

      # JWT signé ici, donc on prend la valeur dans .env racine
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}

      PORT: ${PORT_AUTH}

      # Pour MinIO S3 car on upload l'avatar depuis lui à la création user
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}

      # NODE_ENV peut servir à activer la config prod/dev
      NODE_ENV: development
    depends_on:
      - auth-mongo
    # Healthcheck pour s'assurer que le service est prêt
    # (utile pour nginx)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_AUTH}/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    # On utilise un réseau dédié pour la communication entre services
    networks:
      - app-network

  auth-mongo:
    image: mongo:6.0
    # En dev, on mappe le port hors du container pour y accéder localement
    ports:
      - "27020:27017"
    volumes:
      - auth-mongo-data:/data/db
    networks:
      - app-network

  # ------------------
  # Service Public (API publique posts, etc.)
  # ------------------
  public:
    build: ./breezy-back-public
    # image: my-registry/breezy-back-public:${TAG:-latest}  # PROD
    ports:
      - "3002:${PORT_PUBLIC}"
    depends_on:
      - public-mongo
    environment:
      # Le service public ne génère pas de refresh-token, mais doit
      # pouvoir vérifier l'access-token émis par `auth`
      MONGO_HOST: ${MONGO_HOST_PUBLIC}
      MONGO_PORT: ${MONGO_PORT_PUBLIC}
      MONGO_DATABASE_NAME: ${MONGO_DB_PUBLIC}

      JWT_SECRET: ${JWT_SECRET}

      PORT: ${PORT_PUBLIC}
      NODE_ENV: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_PUBLIC}/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  public-mongo:
    image: mongo:6.0
    ports:
      - "27018:27017"
    volumes:
      - public-mongo-data:/data/db
    networks:
      - app-network

  # ------------------
  # Service Private (API protégée)
  # ------------------
  private:
    build: ./breezy-back-private
    # image: my-registry/breezy-back-private:${TAG:-latest}  # PROD
    ports:
      - "3003:${PORT_PRIVATE}"
    depends_on:
      - private-mongo
    environment:
      MONGO_HOST: ${MONGO_HOST_PRIVATE}
      MONGO_PORT: ${MONGO_PORT_PRIVATE}
      MONGO_DATABASE_NAME: ${MONGO_DB_PRIVATE}

      # Idem, ce service doit valider les JWT signés par `auth`
      JWT_SECRET: ${JWT_SECRET}

      PORT: ${PORT_PRIVATE}
      NODE_ENV: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_PRIVATE}/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  private-mongo:
    image: mongo:6.0
    ports:
      - "27019:27017"
    volumes:
      - private-mongo-data:/data/db
    networks:
      - app-network

  # ------------------
  # Service Frontend (Next.js)
  # ------------------
  frontend:
    build: ./breezy-frontend
    command: npm run dev
    volumes:
      - ./breezy-frontend:/app
      - /app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
    restart: unless-stopped

  # ------------------
  # MinIO (stockage S3-compatible pour avatars / médias)
  # ------------------
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # endpoint S3
      - "9001:9001" # console web
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - app-network

  # ------------------
  # Nginx / Gateway
  # ------------------
  nginx:
    image: nginx:latest
    container_name: gateway
    restart: unless-stopped # ← se relance sauf si on l'arrête manuellement
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      auth:
        condition: service_healthy
      public:
        condition: service_healthy
      private:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-mongo-data:
  public-mongo-data:
  private-mongo-data:
  minio-data:
