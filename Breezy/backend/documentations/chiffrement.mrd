Hachage des mots de passe avec bcrypt

Dans ce projet, nous utilisons la bibliothèque bcrypt pour hacher de manière sécurisée les mots de passe des utilisateurs avant de les stocker en base de données. Voici le fonctionnement :

I - But de bcrypt

bcrypt est un algorithme de hachage qui garantit un chiffrement à sens unique.

Il est impossible de retrouver le mot de passe original à partir du hash.

Même si la base est compromise, les mots de passe restent protégés.

II-  Processus de hachage
Lors de la création d’un utilisateur (dans user.controller.js), le hachage se fait comme suit :


"const salt = await bcrypt.genSalt(10);
const passwordHash = await bcrypt.hash(password, salt);" 


Le salt est une chaîne aléatoire ajoutée au mot de passe.
Cela garantit que même si deux utilisateurs ont le même mot de passe, leurs empreintes seront différentes.

bcrypt utilise plusieurs tours de hachage pour ralentir les attaques par force brute.

III- Vérification d’un mot de passe

XXXXXXXX

IV- Avantages principaux

Salt unique pour chaque utilisateur.

Hachage avec plusieurs tours, ce qui complique les attaques.

Stockage sécurisé des mots de passe dans la base.

V -  Résumé


bcrypt est utilisé pour le hachage des mots de passe lors de la création d’un compte.

bcrypt est aussi utilisé pour les vérifier lors de la connexion.

Tout le processus est sécurisé et gère le salt automatiquement.

En utilisant bcrypt, nous nous assurons que les mots de passe des utilisateurs sont stockés de manière sécurisée, conformément aux meilleures pratiques du secteur.

